<div class="comment_list">
    @foreach (var comment in this.AllComments.Where(x => x.ParentId == null))
    {
        <div class="review_item">
            <div class="media">
                <div class="d-flex">
                    <img src="@comment.ImageUrl" class="commentAvatar" alt="avatar" />
                </div>
                <BSButton Color="Color.Success"
                          Size="Size.Small"
                          Class="btn-comment-circle"
                          OnClick="(() => this.onclick(comment.Id))">
                    <i class="fas fa-caret-down comment-icon-collapse"></i>
                </BSButton>
                <div class="media-body">
                    <h4>@comment.FullName</h4>
                    @if (comment.Username != null)
                    {
                        <span><a href="/Profile/@comment.Username">@@@comment.Username</a></span>
                    }
                    else
                    {
                        <span><a>Anonymous</a></span>
                    }
                    @if (comment.UpdatedOn == null)
                    {
                        <h5>@comment.CreatedOn.ToLocalTime().ToString("dd-MMMM-yyyy HH:mm tt")</h5>
                    }
                    else
                    {
                        <h5>@comment.UpdatedOn?.ToLocalTime().ToString("dd-MMMM-yyyy HH:mm tt") (edited)</h5>
                    }
                    <AuthorizeView Roles="@GlobalConstants.AdministratorRole">
                        <a class="reply_btn" @onclick="@(() => this.OnClick.InvokeAsync(comment.Id))">Reply</a>
                    </AuthorizeView>
                </div>
            </div>
            <p>@comment.Content</p>
        </div>
        <BSCollapse IsOpen="@this.collapses[comment.Id]">
            <CommentReply AllComments="this.AllComments"
                          ReplyComments="this.AllComments
                                     .Where(x => x.ParentId == comment.Id)
                                     .ToList()">
            </CommentReply>
        </BSCollapse>
    }
</div>

@code {
    [Parameter]
    public ICollection<CommentViewModel> AllComments { get; set; }

    [Parameter]
    public EventCallback<string> OnClick { get; set; }

    private Dictionary<string, bool> collapses = new Dictionary<string, bool>();

    protected override void OnInitialized()
    {
        foreach (var comment in this.AllComments)
        {
            collapses.Add(comment.Id, false);
        }
    }

    private void onclick(string id)
    {
        collapses[id] = !collapses[id];
        StateHasChanged();
    }
}